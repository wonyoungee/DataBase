3/4
* git bash 사용 => 리눅스 명령어 사용

:wq : 저장 후 나감
pwd : 현재 위치
mkdir : 디렉토리 만들기
ls -al : 현재 디렉토리 안의 파일 보기 => <<git cmd>> 에서의 명령어는 : dir
git init : 현재 디렉토리에 버전 관리 작업을 진행하겠다고 git에게 알려줌
git status :
	untracked fiels => 버전관리가 되고 있는 디렉토리에 존재하지만 해당 파일은 관리중이X

git add 파일/폴더이름 : git에게 해당 파일 관리하라고 명령 
(add 쓰는 이유: 임시 파일은 관리X 하기 위해)

git commit : 버전 만들기

<수정된 파일 올릴때>
git add 파일이름
git commit



3/5
 <git stage area>
 - 왜 git은 add라는 것을 포함하고 있는가? 왜 commit하기 전에 add를 해야 하는가?
  => 여러가지 파일이 있을때 add한 파일만 commit이 되기 때문에 선택적으로 파일을 commit할 수 있기 때문이다.
 - add를 하면 stage에 올라감. => stage에 올라간 것 == commit 대기상태
 - commit이 된 결과가 저장되는 곳 => repository (저장소)


 <변경사항 확인하기 : log & diff>
 git log : 지금까지의 history 보여줌 (commit 메시지 / commit 주소)

 git log -p : 각각의 commit 사이의 변경된 소스 내용 볼 수 있음
	--- => 이전 버전
	+++ => 다음 버전

 git log 커밋주소(아이디) : 해당 커밋 이전 기록들 보여줌

 git diff 커밋아이디..비교할커밋아이디 : 두 커밋의 소스 코드 사이의 차이점 보여줌.


 <과거로 돌아가기 : reset>
 git reset 커밋아이디 --hard : 해당 커밋아이디 이후의 커밋들은 취소됨. 해당 커밋아이디가 최신 상태가 됨.
 
 ***주의 : reset은 원격저장소에 저장하기 전에만 사용하기!! 그 이후에는 사용하지 말기!!


 <스스로 공부하는 법>
 - 빈도수 높은 것부터 공부!
 git commit --help : commit 도움말
 git commit -a : 수정/삭제한 파일을 자동으로 add시킨 후 commit
 git commit -am "메시지"


 3/6
 <git의 원리>
 - gistory : .git에 있는 list를 보여주는 분석도구

 - git은 어떠한 파일을 저장할때, 파일의 이름이 달라도 파일의 내용이 같으면 같은 object 파일임.

 - git은 SHA1이라는 해시알고리즘을 통해서 그 파일의 이름을 도출.

 - commit에는 두가지 중요한 정보가 있음. 
    1. parent : 이전 커밋이 누구인가
    2. commit이 일어난 시점의 작업 directory에 있는 파일의 이름과 내용(blob)이 tree에 담겨있음.
      => 따라서 각각의 버전마다 다른 tree를 가리키고 있음. ('각각의 버전마다 스냅샷을 찍었다'고 표현.)

 - working directory ---git add---> staging area ---git commit---> repository
 

 3/7
 <branch>
 - 파일의 버전관리
  ex) report2.xsl -> report3.xsl          -> report4.xsl (기존 branch)
	(분기)    					     -> report5.xsl -> report6.xsl
	         -> report2_client.xsl -> report2_client2.xsl (새로운 branch)

    => 손으로 버전관리했을때 단점 : 파일의 이름이 더러워짐, 분기됐던 작업을 합칠때 까다로움.
 - git으로 버전관리하면 세련되게 할 수 있음
 
 - branch : 필요에 의해서 작업이 분기되는 현상
 - 고객사의 요청으로 특별한 기능이 추가되는 경우 사용
 - 원래 소스코드를 변경하지 않고 고객의 커스터마이징된 기능들을 추가해야 할때 사용 
 - 만들어 놓고 쉽게 다시 버리기 위해 사용


 <branch명령어>
 git branch : (앞에 *붙은것) 현재 사용하고 있는 branch 보여줌. (master는 기본 branch)
 
 git branch 브랜치이름 : 해당 브랜치이름의 branch가 만들어짐.

 git checkout 브랜치이름 : 해당 브랜치이름이 현재 사용하고 있는 branch로 변경됨.

 - 브랜치를 "생성"하면 현재 사용하는 branch의 상태가 새로운 브랜치에 그대로 복사됨.

 git log --branches --decorate : 저장소에 있는 모든 branch의 최근 commit 표시 보여줌. HEAD는 현재 checkout된 브랜치를 의미.

 git log : 현재 브랜치에 대한 기록들만 보여줌.

 git log --branches --decorate --graph : 어디서 분기됐는지 그래프로 보여줌.

 stree : 현재 디렉토리의 저장소가 소스트리라는 GUI에 그래프로 나타남.


 <버전과 버전사이의 차이점 비교>
 git log 브랜치1..브랜치2 : 브랜치1 에는 없고 브랜치2 에는 있는 것을 보여줌.
 
 git log -p 브랜치1..브랜치2 : 소스코드까지 보여줌.

 git diff 브랜치1..브랜치2 : 각각의 브랜치의 현재 상태들을 비교할 수 있음.


 <merge : branch 병합>
 git checkout 브랜치1 : 브랜치2를 브랜치1로 가져올거면 브랜치1로 checkout 해야함!
 
 git merge 브랜치2 : 그후에 브랜치2를 merge => commit됐다는 안내창 나옴.

 => 브랜치1은 브랜치2의 모든 내용을 가지게 됨.

 - 브랜치2도 브랜치1의 모든 내용을 갖고 있게 하려면 다시 브랜치2에서 merge 해야함.

 git branch -d 브랜치이름 : 해당 브랜치 삭제
 git branch -D 브랜치이름 : 해당 브랜치 강제로 삭제


 <git stash>
 - stash : 감추다, 숨기다 라는 뜻
 - 사용 : branch에서 작업하던 내용이 끝나지 않았는데 다른 branch로 잠시 checkout 해야할때.
 - 작업했던 내용을 숨겨놓을 수 있음. (git status 했을때 변경사항 뜨지 X)

 git stash : 작업중인 디렉토리의 변경사항을 숨김. 추적중인(add한) 파일만 stash가능함.
 git stash apply : 가장 최신에 숨겼던 내용 다시 보이게 함
 git stash drop : 가장 최신 stash 삭제
 git stash list : stash list 보여줌
 git pop : stash apply + drop 동시에



 3/8
 <branch 충동해결>
 - 같은 파일을 두 브랜치에서 각자 수정하고 merge 했을때
      1. 같은 파일임에도 서로 수정한 위치가 다르다면, 자동으로 합쳐버림. (merge실행한 브랜치에서만)
      2. 서로 수정한 위치가 같다면 ??? =>  "Unmerged Paths : both modified : 해당파일" 문구 뜨면서 merge 실패! => 다시 수정 필요


 <reset checkout>
 git reflog : reset, commit 로그 다 보여줌.
 

 <working copy & index & repository>
 - working copy / working directory / working tree : 작업하는 곳
 - index / staging area / cache : git add를 했을때 포함되는 곳
 - repository / history / tree : commit 됐을때 포함되는 곳

 git reset --hard : working copy & index & repository 다 초기화
 git reset --mixed : index & repository 초기화
 git reset --soft : repository만 초기화
 git reset : (== git reset --mixed)
 

 <merge & conflict>
 - merge -> 자동으로 깃이 병합 시도
 - conflict -> merge했을때 수정한 내용이 다르다면 발생하는 충돌 
 - kdiff3 :병합을 전문적으로 하는 도구
 - git config --global merge.tool kdiff3 : 설정
 - git merge tool : 충돌한 파일에 대해서 tool을 이용해서 merge하라고 명령
 


 3/9
 <Remote Repository> : 원격 저장소
 - 내 컴퓨터가 아닌 인터넷 어딘가에 올려서 백업 / 협업할때 사용
 - 자신이 commit하는 저장소는 지역 저장소
 - 그 지역 저장소와 동기화 되는 저장소를 원격 저장소라 함.
 - git init --bare : 원격 저장소는 수정 불가능하게 설정.
 - push : 지역 저장소 -> 원격 저장소로 upload

  git init
  git remote add 경로별명 저장소경로 : 현재 저장소에 원격 저장소를 추가. 경로별명은 (ex.origin)
  git push --set-upstream 경로별명 브랜치이름 : 해당 브랜치에서 push명령을 내리면 자동으로 경로의 브랜치로 push하겠다고 설정. 그 이후에는 git push만 쓰면 됨.
 git remote remove 경로별명 : 저장소를 지움.


 <github>
 - Fork : 해당 프로젝트가 내 것이 됨. 마음대로 수정 가능. 원본을 수정하는 것이 아니라 복제된 나의 소스 코드들을 수정할 수 있음.
 - pull 먼저 하고 push 하기******
 
 git clone 깃허브클론코드(주소) 복제할디렉토리 : 원격 저장소 -> 로컬 저장소로 동기화.
 git clone 깃허브클론코드(주소) . : (.)은 현재 디렉토리라는 뜻.
 git pull : 원격 저장소 -> 로컬 저장소 로 내용 가져옴. (git clone후에 쓰기)
 git log --reverse : 첫번째 commit부터 볼 수 있음.
 


 3/10
 <SSH를 이용해서 로그인없이 원격저장소 사용하기>
 - HTTPS를 이용했을때 : 특별한 설정 없이 아이디/패스워드 통해 깃헙에 push 가능.
 - SSH를 이용했을때 : 할때마다 로그인을 하지 않아도 됨.
	=> local computer 가 server computer에 자동 로그인 해주는 기능.

 1. ssh-keygen : ssh를 통해서 다른 컴퓨터로 접속할 수 있는 비밀번호 생김. 굉장히 복잡한 비밀번호. 
	-> 두 개의 파일 생성됨. (id_rsa , id_rsa.pub)
	 - id_rsa : private key -> local computer 에 저장됨
	 - id_rsa.pub : public key -> sever computer 에 저장됨

 2. cat id_rsa.pub : 해당 내용 전부 copy
 3. github 사이트의 settings -> SSH and GPG keys 클릭 -> New SSH key -> Key 칸에 copy한 내용 붙여넣기 -> Add SSH key : github(원격저장소)에 서버 컴퓨터의 public key를 저장한 것.
 4. github의 SSH code 복사
 5. git clone 붙여넣기
 6. 연결 완료.


 <pull & fetch>
 git pull : 지역저장소와 원격저장소가 같은 commit 가리킴. (병합됨)
 
 git fetch : 다운로드 받은 최신 커밋이 원격 저장소 몇번인진 기록해놨지만, 아직 지역저장소엔 어떠한 변화도 가하지 않은 것 (원격저장소 커밋이 지역저장소 커밋을 앞서고 있는 상황이 만들어짐. 즉, 병합X)
 -> git merge 원격저장소브랜치이름 : merge해줘야 지역저장소와 원격저장소가 같은 commit 가리킴.

 - 즉, fetch 한 다음엔 merge 해줘야함. 따라서 자동으로 merge되는 pull 쓰는게 편함.


 <tag>
 - releases (tag) : git이 만들고 있는 소스코드 중에서 사용자에게 제공돼도 되는 버전들. 즉, 정식으로 오픈된 깃의 버전을 다운로드 하는 기능. (커밋 아이디 바뀌면 안됨!)
 - branch : 최신 커밋이 누구인가는 고정 X. 바뀌어야함. 
 
<light weight tag>
 git tag 1.0.0 : 현재 브랜치가 가리키고 있는 commit에 대한 tag 만들어짐.
 git tag 1.0.0 브랜치이름(또는 커밋아이디) : 해당 브랜치가 가리키고 있는 commit에 대한 tag 만들어짐.
 git checkout 태그이름(ex. 1.0.0) : 해당 commit으로 돌아갈 수 있음.
 
 <annotated tag>
 git tag -a 태그이름(ex. 1.1.0) -m "코멘트내용" : 해당 tag에 코멘트 남길 수 있음.
 git tag -v 태그이름(ex. 1.1.0) : 해당 태그에 대한 자세한 내용 볼 수 있음.

 git push --tags : 로컬저장소에서 만든 태그가 원격저장소로 업로드 됨. -> github release에 생김.
