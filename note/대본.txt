안녕하세요 저희는 템플릿 메소드 패턴과 팩토리 메소드 패턴을 맡게 된 2조 입니다. 저는 그 중에서 템플릿 메소드 패턴 부분을 발표할 예정이고요, 팩토리 메소드 패턴은 다음 팀원이 발표해주실겁니다. 

그럼 먼저 템플릿 메소드 패턴에 대해 발표하도록 하겠습니다. 저의 발표 내용은 템플릿 메소드 패턴의 정의, 활용사례, 그리고 구현 코드 이렇게 세단계로 진행될 예정입니다. 

먼저, 템플릿 메소드 패턴의 정의를 살펴보겠습니다. 
템플릿 메소드 패턴은 알고리즘의 구조를 메소드에 정의하고, 하위 클래스에서 알고리즘 구조의 변경 없이 알고리즘을 재정의 하는 패턴이라고 정의되어있습니다. 
또한, 템플릿 메소드 패턴은 행위 패턴 중 하나로, 특정 작업을 처리하는 일부분을 서브 클래스로 캡슐화하여 전체적인 구조는 바꾸지 않으면서 특정 단계에서 수행하는 내용을 바꾸는 패턴입니다.
따라서 알고리즘이 단계별로 나누어지거나, 메소드들이 같은 역할을 하지만 여러곳에서 다른 형태로 사용이 필요한 경우에 유용하게 쓰이고 있습니다.
이렇듯, 전체적인 알고리즘은 상위 클래스에서 구현하고,  확장이나 변화가 필요한 부분은 하위 클래스에서 구현함으로써 전체적인 알고리즘 코드의 재사용성을 높이고, 확장성을 높일 수 있다는 것이 장점입니다. 
이를 정리하자면, 전체적인 레이아웃은 통일 시키지만, 상속받은 클래스로 하여금 어느 정도 유연성을 주도록 하는 디자인 패턴이라고 생각하시면 될 것 같습니다.

다음은 템플릿 메소드 패턴을 이해하기 위한 예시입니다. 왼쪽의 템플릿 메소드 패턴 UML을 보시면 추상클래스가 있는데요. 이는 템플릿 메서드를 정의하는 클래스입니다. 이 추상 클래스가 상위 클래스로서 이곳에서 공통적인 알고리즘을 구현하고, 이를 물려받은 하위 클래스에서 구현될 기능을 추상 메서드 또는 hook메서드로 정의하게 됩니다.
여기서 추상메서드와 훅 메서드가 헷갈려서 더 찾아봤었는데요, abstract 키워드를 붙이면 상속 받은 클래스는 반드시 해당 메소드를 구현해야 하지만, abstract 키워드를 붙이지 않고 훅 메소드로 만들면 반드시 구현할 필요가 없다고 합니다. 즉, 상속 받은 클래스에서는 선택적으로 오버라이드할 수 있다는 얘기가 됩니다. 따라서 훅 메소드로 만들게 되면 필요한 곳만 재정의해서 사용할 수 있게 되는 것입니다.
다시 예시로 돌아가서 Concrete Class를 보시면, 이 클래스는 상위 클래스인 추상클래스로부터 물려받은 추상메서드나 훅 메서드를 구현하는 클래스입니다. 상위 클래스의 템플릿 메서드를 하위클래스에 적합하게 추상메서드나 훅메서드를 다시 오버라이드 하는 클래스라고 보시면 될 것 같습니다.
여기서 추상클래스의 템플릿 메서드는 실제 실행할때 호출될 메서드이고요, 이 템플릿 메서드가 호출되면 훅1과 훅2 의 단계로 추상메서드가 호출되게 됩니다. 이 메소드들은 오버라이드한 Concrete class에서 구체적으로 구현되어 실행 됩니다.

다음은 이런 템플릿 메소드 패턴이 활용되고 있는 사례에 대해 살펴보겠습니다. 먼저, 시나리오를 정의하는 메소드, 즉 프레임워크에서 많이 사용되고 있습니다. 
또한, 스프링 mvc에서 템플릿 메소드 패턴을 이용하여 핵심기능과 부가기능을 분리하는 데에도 유용하게 쓰이고 있습니다. 변하지 않는 부분은 부모인 추상클래스에 올려놓고 동일하게 사용하며, 변하지 않는 부분은 상속을 통해 해결하는 것입니다. 즉, 해당 부모 추상클래스를 구현한 클래스에서 상속을 통해 변하는 부분만 구현해주고, 변하지 않는 부분은 동일하게 쓸 수 있습니다.
또한, 확장성과 재사용성을 높이고 싶거나 중복 코드를 줄이고자 할때도 활용되고 있습니다.

마지막으론 템플릿 메소드 패턴을 더 잘 이해할 수 있도록 도와주는 구현 코드에 대해 살펴보겠습니다. 저는 카페에서 커피를 만드는 과정을 예시로 작성한 코드를 준비하게 되었습니다. 해당 레시피는 보이시는 것처럼 네가지 단계로 구성되어 있는데요, 여기서 아이스 아메리카노와 아이스라떼의 만드는 과정에서 세단계는 공통적으로 진행되지만 마지막 단계는 넣는다는 행위는 같지만 다른 옵션을 넣는다는 것을 알 수 있습니다.

이는 위 두 과정을 코드로 구현한 것입니다. 보시면 아아 클래스와 아이스라떼 클래스 모두 boilwater, put 에스프레소, put ice 함수는 똑같이 공통적으로 구현되고 있는 것을 알 수 있습니다. 이처럼 두 코드를 각각 구현하게 되면 중복되는 코드가 많아지게 됩니다. 하지만 이러한 코드에 템플릿 메서드를 적용하면 중복된 코드를 줄일 수 있습니다.

다음은 위 두 코드에 템플릿 메소드 패턴을 적용한 코드입니다. 아까와 달리 커피 클래스가 새로 생겼는데요, 아아 클래스와 라떼 클래스의 공통점인 커피레시피 라는 점을 뽑아서 이를 추상클래스, 즉 상위 클래스로 만들게 되었습니다. 그리고 아메리카노와 라떼클래스는 Concrete class 즉 하위클래스로, 커피클래스를 상속받고 있습니다. 상위클래스인 커피클래스에서는 아메리카노와 라떼 레시피의 중복 코드였던 3가지 함수. boilwater, put espresso, put ice를 구현해주고, 이를 아메리카노와 라떼클래스는 Concrete class 즉 하위클래스로, 커피클래스를 상속받아 이 함수들 또한 상속받아 사용할 수 있습니다. 하지만 행위는 같지만 다른 옵션을 넣었던 put 시럽, put milk 함수는 커피클래스에서 put extra라는 추상 함수로 정의되게 됩니다. 그리고 이 함수를 라떼, 아메리카노 각각은 오버라이드를 통해 구체적으로 구현합니다. 마지막 메인함수를 보시면, 아메리카노, 라떼 각각의 객체가 makecoffee라는 coffee 클래스의 템플릿 메소드를 호출하게 되면, 순차적으로 coffee클래스의 공통부분인 세 함수가 호출되고 마지막으로 추상메소드였던 put extra 함수는 각각의 하위 클래스에서 구현한 부분을 호출하게 됩니다. 이처럼, 템플릿 메소드 패턴은 추상 메소드와 훅 메소드를 적절히 사용해서 전체적인 알고리즘의 뼈대는 유지하지만, 유연하게 기능을 변경할 수 있도록 하고자 할 때 사용됩니다. 또는 중복 코드를 줄이고자 할 때도 사용되는 패턴임을 알 수 있습니다.

이상으로 템플릿 메소드 패턴 발표를 마치겠습니다. 다음 팩토리 메서드 패턴은 정우씨가 발표해주시겠습니다.